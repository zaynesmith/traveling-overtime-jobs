generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TABLE: public.user
model User {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String            @unique
  passwordHash     String            @map("passwordhash")
  role             String?           @default("jobseeker")

  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  employerProfile  EmployerProfile?
  jobseekerprofile JobseekerProfile?

  @@map("user")
}

// TABLE: public.employerprofile
model EmployerProfile {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyName   String
  officePhone   String?
  mobilePhone   String?
  address1      String?
  address2      String?
  city          String?
  state         String?
  zip           String?
  website       String?
  timezone      String?
  userId        String    @unique(map: "employerprofile_userid_key") @db.Uuid
  firstName     String?
  lastName      String?
  phone         String?
  location      String?
  notes         String?
  completedAt   DateTime? @db.Timestamp(6)

  subscription_status    String? @default("free")
  subscription_tier      String? @default("basic")
  stripe_customer_id     String?
  stripe_subscription_id String?

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "employerprofile_userid_fkey")
  jobs          jobs[]
  savedCandidates saved_candidates[]

  @@map("employerprofile")
}

// TABLE: public.jobseekerprofile
// NOTE: These field names exactly match your Supabase columns:
// firstName, lastName, email, address1, address2, city, state, zip, trade, resumeUrl, userId
model JobseekerProfile {
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName    String?
  lastName     String?
  email        String?
  address1     String?
  address2     String?
  city         String?
  state        String?
  zip          String?
  trade        String?
  resumeUrl    String?
  userId       String?         @unique @db.Uuid

  lastActive   DateTime?       @default(now())

  // relation back to user
  user         User?           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  applications applications[]
  savedBy      saved_candidates[]

  @@map("jobseekerprofile")
}

// TABLE: public.applications
model applications {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_id           String?           @db.Uuid
  jobseeker_id     String?           @db.Uuid
  applied_at       DateTime?         @default(now()) @db.Timestamp(6)
  status           String?           @default("pending")

  jobs             jobs?             @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  jobseekerprofile JobseekerProfile? @relation(fields: [jobseeker_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([job_id, jobseeker_id], map: "applications_unique")
}

// TABLE: public.jobs
model jobs {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employer_id       String?          @db.Uuid
  title             String
  description       String?
  trade             String?
  location          String?
  city              String?
  state             String?
  zip               String?
  hourly_pay        String?
  per_diem          String?
  additional_requirements String?
  posted_at         DateTime?        @default(now()) @db.Timestamp(6)

  applications      applications[]
  employerprofile   EmployerProfile? @relation(fields: [employer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

// TABLE: public.saved_candidates
model saved_candidates {
  id           String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employer_id  String?           @db.Uuid
  jobseeker_id String?           @db.Uuid
  saved_at     DateTime?         @default(now()) @db.Timestamp(6)

  employerprofile   EmployerProfile? @relation(fields: [employer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  jobseekerprofile JobseekerProfile? @relation(fields: [jobseeker_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("saved_candidates")
}
