generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String            @unique
  passwordHash     String            @map("passwordhash")
  role             String?           @default("jobseeker")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  employerProfile  EmployerProfile?
  jobseekerprofile JobseekerProfile?

  @@map("user")
}

model EmployerProfile {
  id                     String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyName            String
  officePhone            String?
  mobilePhone            String?
  address1               String?
  address2               String?
  city                   String?
  state                  String?
  zip                    String?
  website                String?
  timezone               String?
  userId                 String             @unique(map: "employerprofile_userid_key") @db.Uuid
  firstName              String?
  lastName               String?
  phone                  String?
  location               String?
  notes                  String?
  completedAt            DateTime?          @db.Timestamp(6)
  subscription_status    String?            @default("free")
  subscription_tier      String?            @default("basic")
  stripe_customer_id     String?
  stripe_subscription_id String?
  email                  String?
  user                   User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "employerprofile_userid_fkey")
  jobs                   jobs[]
  savedCandidates        saved_candidates[]

  @@map("employerprofile")
}

model JobseekerProfile {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName            String?
  lastName             String?
  email                String?
  address1             String?
  address2             String?
  city                 String?
  state                String?
  zip                  String?
  trade                String?
  resumeUrl            String?
  userId               String?            @unique(map: "jobseekerprofile_userid_key") @db.Uuid
  lastActive           DateTime?          @default(now()) @db.Timestamp(6)
  updatedAt            DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  phone                String?
  hasJourneymanLicense Boolean?           @default(false)
  licensedStates       String[]
  certifications       String?
  certFiles            String[]
  lastBump             DateTime?          @db.Timestamp(6)
  last_bump            DateTime?          @db.Timestamp(6)
  lat                  Float?
  lon                  Float?
  applications         applications[]
  user                 User?              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "jobseekerprofile_userid_fkey")
  savedBy              saved_candidates[]

  @@index([lat, lon], map: "idx_jobseekerprofile_lat_lon")
  @@map("jobseekerprofile")
}

model applications {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_id           String?           @db.Uuid
  jobseeker_id     String?           @db.Uuid
  applied_at       DateTime?         @default(now()) @db.Timestamp(6)
  status           String?           @default("pending")
  jobs             jobs?             @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  jobseekerprofile JobseekerProfile? @relation(fields: [jobseeker_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([job_id, jobseeker_id], map: "applications_unique")
}

model jobs {
  id                      String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employer_id             String?          @db.Uuid
  title                   String
  description             String?
  trade                   String?
  location                String?
  zip                     String?
  hourly_pay              String?
  posted_at               DateTime?        @default(now()) @db.Timestamp(6)
  city                    String?
  state                   String?
  per_diem                String?
  additional_requirements String?
  showFirstName           Boolean?         @default(false)
  showEmail               Boolean?         @default(false)
  showPhone               Boolean?         @default(false)
  lat                     Float?
  lon                     Float?
  applications            applications[]
  employerprofile         EmployerProfile? @relation(fields: [employer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([lat, lon], map: "idx_jobs_lat_lon")
}

model saved_candidates {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employer_id      String?           @db.Uuid
  jobseeker_id     String?           @db.Uuid
  saved_at         DateTime?         @default(now()) @db.Timestamp(6)
  employerprofile  EmployerProfile?  @relation(fields: [employer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  jobseekerprofile JobseekerProfile? @relation(fields: [jobseeker_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([employer_id, jobseeker_id])
  @@unique([employer_id, jobseeker_id], map: "saved_unique_pair")
  @@map("saved_candidates")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model employerprofile_backup {
  id                     String?   @db.Uuid
  companyName            String?
  officePhone            String?
  mobilePhone            String?
  address1               String?
  address2               String?
  city                   String?
  state                  String?
  zip                    String?
  website                String?
  timezone               String?
  userId                 String?   @db.Uuid
  firstName              String?
  lastName               String?
  phone                  String?
  location               String?
  notes                  String?
  completedAt            DateTime? @db.Timestamp(6)
  subscription_status    String?
  subscription_tier      String?
  stripe_customer_id     String?
  stripe_subscription_id String?
  email                  String?

  @@ignore
}
