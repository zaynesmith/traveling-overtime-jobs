generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email            String            @unique
  passwordHash     String            @map("passwordhash")
  role             String?           @default("jobseeker")
  createdat        DateTime?         @default(now()) @db.Timestamp(6)
  updatedat        DateTime?         @default(now()) @db.Timestamp(6)
  passwordHash     String?
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  createdAt        DateTime?         @default(now()) @db.Timestamp(6)
  updatedAt        DateTime?         @default(now()) @db.Timestamp(6)
  employerProfile  EmployerProfile?
  jobseekerprofile JobseekerProfile?

  @@map("user")
}

model EmployerProfile {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyName String
  officePhone String?
  mobilePhone String?
  address1    String?
  address2    String?
  city        String?
  state       String?
  zip         String?
  website     String?
  timezone    String?
  userId      String    @unique(map: "employerprofile_userid_key") @db.Uuid
  firstName   String?
  lastName    String?
  phone       String?
  location    String?
  notes       String?
  completedAt DateTime? @db.Timestamp(6)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "employerprofile_userid_fkey")
  jobs        jobs[]

  @@map("employerprofile")
}

model JobseekerProfile {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstname    String?
  lastname     String?
  email        String?
  address1     String?
  address2     String?
  city         String?
  state        String?
  zip          String?
  trade        String?
  resumeurl    String?
  userid       String?        @unique @db.Uuid
  resume_url   String?
  applications applications[]
  user         User?          @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("jobseekerprofile")
}

model applications {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_id           String?           @db.Uuid
  jobseeker_id     String?           @db.Uuid
  applied_at       DateTime?         @default(now()) @db.Timestamp(6)
  status           String?           @default("pending")
  jobs             jobs?             @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  jobseekerprofile JobseekerProfile? @relation(fields: [jobseeker_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([job_id, jobseeker_id], map: "applications_unique")
}

model jobs {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employer_id     String?          @db.Uuid
  title           String
  description     String?
  trade           String?
  location        String?
  zip             String?
  payrate         String?
  posted_at       DateTime?        @default(now()) @db.Timestamp(6)
  applications    applications[]
  employerprofile EmployerProfile? @relation(fields: [employer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
